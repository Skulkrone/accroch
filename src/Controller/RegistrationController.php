<?php

namespace App\Controller;

use App\Form\UserType;
use App\Entity\User;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class RegistrationController extends Controller {

    /**
     * @Route("/register", name="user_registration")
     */
    public function registerAction(Request $request, UserPasswordEncoderInterface $passwordEncoder, \Swift_Mailer $mailer) {
        $user = new User();
        $form = $this->createForm(UserType::class, $user);

        $form->handleRequest($request);
        $typerRole = $form->get('typeRoles')->getData();
        if ($form->isSubmitted() && $form->isValid()) {

            $password = $passwordEncoder->encodePassword($user, $user->getPassword());
            $user->setPassword($password);

            // Par defaut l'utilisateur aura toujours le rÃ´le ROLE_USER
            if ($typerRole == 1) {
                $user->setRoles(['ROLE_ADMIN']);
                return $this->redirectToRoute('admin');
            } elseif ($typerRole == 2) {
                $user->setRoles(['ROLE_USER']);
            } elseif ($typerRole == 3) {
                $user->setRoles(['ROLE_ADD']);
            }

            // $file stores the uploaded file
            $file = $user->getAvatar();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // moves the file to the directory where avatar are stored
            $file->move(
                    $this->getParameter('avatar_directory'), $fileName
            );

            // updates the 'avatar' property to store the file name
            // instead of its contents
            $user->setAvatar($fileName);

            // ... persist the $product variable or any other work
            //return $this->redirect($this->generateUrl('app_product_list'));
            // On enregistre l'utilisateur dans la base
            $em = $this->getDoctrine()->getManager();
            $em->persist($user);
            $em->flush();

            return $this->redirectToRoute('default');
        }

        return $this->render(
                        'Registration/register.html.twig', array('form' => $form->createView())
        );
    }

    /**
     * @return string
     */
    private function generateUniqueFileName() {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

}
